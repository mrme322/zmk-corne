#undef ZMK_BEHAVIORS_KEEP_ALL

#define ZMK_BEHAVIORS_KEEP_SK
#define ZMK_BEHAVIORS_KEEP_MT
#define ZMK_BEHAVIORS_KEEP_KT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&sk {
    quick-release;
    release-after-ms = <1000>;
};

/ {
    combos {
        compatible = "zmk,combos";

        adjL {
            timeout-ms = <300>;
            bindings = <&mo 8>;
            key-positions = <1 5>;
            layers = <0>;
        };

        capsWords {
            bindings = <&caps_word>;
            key-positions = <38 39>;
            timeout-ms = <150>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        symLayer {
            bindings = <&mo 6>;
            key-positions = <37 40>;
            timeout-ms = <150>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0>;
        };

        ipadLayer {
            bindings = <&mo 3>;
            key-positions = <36 41>;
            timeout-ms = <150>;
            slow-release;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };
    };

    behaviors {
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            label = "hmr";
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <280>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
            hold-trigger-on-release;             // delay positional check until key-release
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            require-prior-idle-ms = <150>;
            quick-tap-ms = <175>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            label = "hml";
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <280>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 36 37 38>;
            hold-trigger-on-release;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            quick-tap-ms = <175>;
        };

        keyrepeat: keyrepeat {
            compatible = "zmk,behavior-hold-tap";
            label = "KEYREPEAT";
            bindings = <&mo>, <&key_repeat>;

            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <50>;
        };

        stickShiftlt: stickShiftlt {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKSHIFTLT";
            bindings = <&mo>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            retro-tap;
        };

        keyrepeatMo: keyrepeatMo {
            compatible = "zmk,behavior-hold-tap";
            label = "KEYREPEATMO";
            bindings = <&mo>, <&key_repeat>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            retro-tap;
        };
    };

    macros {
        minimize: minimize {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(SPACE)>, <&macro_wait_time 200>, <&kp N>;

            label = "MINIMIZE";
        };

        dt1: dt1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LC(LG(LEFT))>,
                <&macro_wait_time 25>,
                <&kp LC(LG(LEFT))>,
                <&macro_wait_time 25>,
                <&kp LG(LC(LEFT))>;

            label = "DT1";
        };

        dt2: dt2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LC(LG(LEFT))>,
                <&macro_wait_time 25>,
                <&kp LC(LG(LEFT))>,
                <&macro_wait_time 25>,
                <&kp LG(LC(LEFT))>,
                <&macro_wait_time 25>,
                <&kp LC(LG(RIGHT))>;

            label = "DT2";
        };

        dt3: dt3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LC(LG(LEFT))>,
                <&macro_wait_time 25>,
                <&kp LC(LG(LEFT))>,
                <&macro_wait_time 25>,
                <&kp LG(LC(LEFT))>,
                <&macro_wait_time 25>,
                <&kp LC(LG(RIGHT))>,
                <&macro_wait_time 25>,
                <&kp LC(LG(RIGHT))>;

            label = "DT3";
        };

        dt4: dt4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LC(LG(LEFT))>,
                <&macro_wait_time 25>,
                <&kp LC(LG(LEFT))>,
                <&macro_wait_time 25>,
                <&kp LG(LC(LEFT))>,
                <&macro_wait_time 25>,
                <&kp LC(LG(RIGHT))>,
                <&macro_wait_time 25>,
                <&kp LC(LG(RIGHT))>,
                <&macro_wait_time 25>,
                <&kp LC(LG(RIGHT))>;

            label = "DT4";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        L0 {
            bindings = <
&none  &kp Q  &kp W  &kp E      &kp R           &kp T                         &kp Y        &kp U      &kp I            &kp O    &kp P      &none
&none  &kp A  &kp S  &kp D      &kp F           &kp G                         &kp H        &kp J      &kp K            &kp L    &kp SEMI   &none
&none  &kp Z  &kp X  &kp C      &kp V           &kp B                         &kp N        &kp M      &kp COMMA        &kp DOT  &kp SLASH  &none
                     &lt 1 TAB  &lt 7 QUESTION  &stickShiftlt 2 LEFT_SHIFT    &lt 4 SPACE  &lt 5 RET  &lt 1 BACKSPACE
            >;
        };

        L1 {
            bindings = <
&none  &kp ESC       &kp LC(BSPC)  &kp DEL    &kp BSPC        &none    &none  &kp BSPC        &kp DELETE  &kp SQT   &none         &none
&none  &kp LEFT_GUI  &kp LALT      &kp LCTRL  &kp LEFT_SHIFT  &none    &none  &kp LEFT_SHIFT  &kp LCTRL   &kp LALT  &kp LEFT_WIN  &none
&none  &none         &none         &none      &none           &none    &none  &none           &none       &none     &none         &none
                                   &mo 1      &none           &none    &none  &none           &mo 1
            >;
        };

        winSC {
            bindings = <
&none  &kp LC(LG(F4))  &kp LG(TAB)    &kp LC(LG(LEFT))  &kp LC(LG(RIGHT))  &kp LC(LG(D))    &kp C_BRI_UP   &none  &none  &none  &none  &none
&none  &kp LC(A)       &kp LC(X)      &kp LC(C)         &kp LC(V)          &none            &none          &none  &none  &none  &none  &none
&none  &kp LC(Z)       &kp C_AC_HOME  &kp LG(LS(S))     &kp LG(D)          &kp LA(F4)       &kp C_BRI_DEC  &none  &none  &none  &none  &none
                                      &none             &none              &none            &none          &none  &none
            >;
        };

        ipadSC {
            bindings = <
&none  &none      &none      &none                 &none      &none    &none  &none  &none  &none  &none  &none
&none  &kp LG(A)  &kp LG(X)  &kp LG(C)             &kp LG(V)  &none    &none  &none  &none  &none  &none  &none
&none  &kp LG(Z)  &none      &kp LG(LS(NUMBER_4))  &kp LG(H)  &none    &none  &none  &none  &none  &none  &none
                             &none                 &none      &none    &none  &none  &none
            >;
        };

        num {
            bindings = <
&none  &none         &none     &kp DEL    &kp BSPC        &none    &kp PLUS   &kp N7      &kp N8     &kp N9  &kp STAR   &none
&none  &kp LEFT_GUI  &kp LALT  &kp LCTRL  &kp LEFT_SHIFT  &none    &kp MINUS  &kp N4      &kp N5     &kp N6  &kp SLASH  &none
&none  &none         &none     &none      &none           &none    &kp N0     &kp N1      &kp N2     &kp N3  &kp EQUAL  &none
                               &none      &none           &none    &none      &kp PERIOD  &kp ENTER
            >;
        };

        nav-media {
            bindings = <
&none  &none         &none     &kp DEL    &kp BSPC        &none    &kp C_VOL_UP  &kp PG_UP   &kp UP      &kp PG_DN   &kp C_MUTE  &none
&none  &kp LEFT_GUI  &kp LALT  &kp LCTRL  &kp LEFT_SHIFT  &none    &kp HOME      &kp LEFT    &kp DOWN    &kp RIGHT   &kp END     &none
&none  &none         &none     &none      &none           &none    &kp C_VOL_DN  &kp C_PREV  &kp C_PLAY  &kp C_NEXT  &kp ENTER   &none
                               &none      &none           &none    &none         &none       &none
            >;
        };

        symb {
            bindings = <
&none  &kp EXCL      &kp AT    &kp DEL        &kp BSPC        &kp DOLLAR    &kp PLUS   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp GRAVE  &kp STAR   &none
&none  &kp LEFT_GUI  &kp LALT  &kp LCTRL      &kp LEFT_SHIFT  &kp CAPS      &kp MINUS  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDER  &kp SLASH  &none
&none  &kp CARET     &kp AMPS  &kp BACKSLASH  &kp PERCENT     &kp POUND     &kp PIPE   &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp TILDE  &kp EQUAL  &none
                               &none          &none           &none         &none      &none                 &none
            >;
        };

        fn {
            bindings = <
&none  &kp F1  &kp F2   &kp F3   &kp F4   &none    &none  &kp BSPC        &kp DEL    &none     &none         &none
&none  &kp F5  &kp F6   &kp F7   &kp F8   &none    &none  &kp LEFT_SHIFT  &kp LCTRL  &kp LALT  &kp LEFT_GUI  &none
&none  &kp F9  &kp F10  &kp F11  &kp F12  &none    &none  &none           &none      &none     &none         &none
                        &none    &none    &none    &none  &none           &none
            >;
        };

        adj {
            bindings = <
&none  &none  &none  &none  &none  &none          &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none
&none  &none  &none  &none  &none  &none          &none         &none         &none         &none         &bt BT_CLR      &none
&none  &none  &none  &none  &none  &none          &none         &none         &none         &none         &studio_unlock  &none
                     &none  &none  &bootloader    &bootloader   &none         &out OUT_TOG
            >;
        };
    };
};
