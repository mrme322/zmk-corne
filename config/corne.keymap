#undef ZMK_BEHAVIORS_KEEP_ALL

#define ZMK_BEHAVIORS_KEEP_SK
#define ZMK_BEHAVIORS_KEEP_MT
#define ZMK_BEHAVIORS_KEEP_KT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&sk {
    quick-release;
    release-after-ms = <1000>;
};

/ {
    combos {
        compatible = "zmk,combos";

        escL {
            timeout-ms = <40>;
            bindings = <&kp ESCAPE>;
            key-positions = <3 2>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        adjL {
            timeout-ms = <200>;
            bindings = <&mo 7>;
            key-positions = <1 5>;
            layers = <0>;
        };

        aphostrope {
            timeout-ms = <35>;
            bindings = <&kp SQT>;
            key-positions = <8 9>;
            layers = <0>;
        };

        SKshift {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <38 39>;
            timeout-ms = <150>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        backR {
            bindings = <&kp BACKSPACE>;
            key-positions = <19 20>;
            timeout-ms = <40>;
            require-prior-idle-ms = <100>;
            layers = <0 5 3 4>;
        };

        backL {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 15>;
            timeout-ms = <40>;
            require-prior-idle-ms = <100>;
            layers = <0 5 3 4>;
        };

        questionR {
            bindings = <&kp QUESTION>;
            key-positions = <32 33>;
            timeout-ms = <40>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        wordDel {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <27 28>;
            timeout-ms = <40>;
            require-prior-idle-ms = <100>;
            layers = <0>;
            layers = <0 5 3 4>;
        };

        delR {
            bindings = <&kp DELETE>;
            key-positions = <7 8>;
            timeout-ms = <40>;
            require-prior-idle-ms = <100>;
            layers = <0>;
            layers = <0 5 3 4>;
        };

        undo {
            bindings = <&kp LC(Z)>;
            key-positions = <27 26>;
            timeout-ms = <40>;
            require-prior-idle-ms = <100>;
            layers = <0>;
            layers = <0 5 3 4>;
        };

        delL {
            bindings = <&kp DELETE>;
            key-positions = <4 3>;
            timeout-ms = <40>;
            require-prior-idle-ms = <100>;
            layers = <0 5 3 4>;
        };
    };

    behaviors {
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            label = "hmr";
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <280>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
            hold-trigger-on-release;             // delay positional check until key-release
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            require-prior-idle-ms = <150>;
            quick-tap-ms = <175>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            label = "hml";
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <280>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 36 37 38>;
            hold-trigger-on-release;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            quick-tap-ms = <175>;
        };

        shiftSKShift: shiftSKShift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            label = "SHIFTSKSHIFT";
            tapping-term-ms = <50>;
            quick-tap-ms = <(-1)>;
            bindings = <&kp>, <&sk>;

            flavor = "tap-preferred";
        };

        skShift_Molayer: skShift_Molayer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            label = "SKSHIFT_MOLAYER";
            tapping-term-ms = <100>;
            quick-tap-ms = <(-1)>;
            retro-tap;
            flavor = "tap-unless-interrupted";
            bindings = <&mo>, <&sk>;
        };

        spaceWinIpad: spaceWinIpad {
            compatible = "zmk,behavior-tap-dance";
            label = "SPACEWINIPAD";
            #binding-cells = <0>;
            bindings = <&lt 1 SPACE>, <&lt 2 SPACE>;
        };
    };

    macros {
        minimize: minimize {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(SPACE)>, <&macro_wait_time 200>, <&kp N>;

            label = "MINIMIZE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        L0 {
            bindings = <
&none  &kp Q            &kp W            &kp E                &kp R              &kp T            &kp Y        &kp U              &kp I                &kp O            &kp P                    &none
&none  &hml LEFT_GUI A  &hml LEFT_ALT S  &hml LEFT_CONTROL D  &hml LEFT_SHIFT F  &kp G            &kp H        &hmr LEFT_SHIFT J  &hmr LEFT_CONTROL K  &hmr LEFT_ALT L  &hmr LEFT_GUI SEMICOLON  &none
&none  &kp Z            &kp X            &kp C                &kp V              &kp B            &kp N        &kp M              &kp COMMA            &kp DOT          &kp SLASH                &none
                                         &kp LEFT_GUI         &lt 6 TAB          &spaceWinIpad    &lt 3 SPACE  &lt 4 RET          &lt 5 K_APP
            >;
        };

        winSC {
            bindings = <
&none  &minimize  &none      &kp LG(LS(S))      &none      &kp BACKSPACE    &none  &none  &none  &none  &none  &none
&none  &kp LC(A)  &kp LC(X)  &kp LC(C)          &kp LC(V)  &kp DEL          &none  &none  &none  &none  &none  &none
&none  &kp LC(Z)  &none      &kp LC(BACKSPACE)  &kp LG(D)  &kp ENTER        &none  &none  &none  &none  &none  &none
                             &none              &none      &none            &none  &none  &none
            >;
        };

        ipadSC {
            bindings = <
&none  &none      &none      &kp LG(LS(NUMBER_4))  &none      &kp BACKSPACE    &none  &none  &none  &none  &none  &none
&none  &kp LG(A)  &kp LG(X)  &kp LG(C)             &kp LG(V)  &kp DEL          &none  &none  &none  &none  &none  &none
&none  &kp LG(Z)  &none      &none                 &kp LG(H)  &kp ENTER        &none  &none  &none  &none  &none  &none
                             &none                 &none      &none            &none  &none  &none
            >;
        };

        num {
            bindings = <
&none  &none         &none     &none      &none           &kp BSPC     &kp PLUS   &kp N7   &kp N8     &kp N9  &kp STAR   &none
&none  &kp LEFT_GUI  &kp LALT  &kp LCTRL  &kp LEFT_SHIFT  &kp DEL      &kp MINUS  &kp N4   &kp N5     &kp N6  &kp SLASH  &none
&none  &none         &none     &none      &none           &kp RET      &kp N0     &kp N1   &kp N2     &kp N3  &kp EQUAL  &none
                               &kp LGUI   &kp TAB         &kp SPACE    &none      &kp DOT  &kp ENTER
            >;
        };

        nav-media {
            bindings = <
&none  &none         &none     &none      &none           &kp BACKSPACE    &kp C_VOL_UP  &kp PG_UP   &kp UP       &kp PG_DN   &kp C_MUTE  &none
&none  &kp LEFT_GUI  &kp LALT  &kp LCTRL  &kp LEFT_SHIFT  &kp DELETE       &kp HOME      &kp LEFT    &kp DOWN     &kp RIGHT   &kp END     &none
&none  &none         &none     &none      &none           &kp ENTER        &kp C_VOL_DN  &kp C_PREV  &kp C_PLAY   &kp C_NEXT  &kp CAPS    &none
                               &kp LGUI   &kp TAB         &kp SPACE        &kp SPACE     &none       &kp K_CMENU
            >;
        };

        symb {
            bindings = <
&none  &kp EXCL      &kp AT    &kp HASH       &kp DLLR        &kp BACKSPACE    &kp PLUS   &kp GRAVE  &kp LPAR  &kp RPAR  &kp STAR   &none
&none  &kp LEFT_GUI  &kp LALT  &kp LCTRL      &kp LEFT_SHIFT  &kp DELETE       &kp MINUS  &kp TILDE  &kp LBKT  &kp RBKT  &kp SLASH  &none
&none  &kp CARET     &kp AMPS  &kp BACKSLASH  &kp APOS        &kp PERCENT      &kp PIPE   &kp UNDER  &kp LBRC  &kp RBRC  &kp EQUAL  &none
                               &none          &kp TAB         &kp SPACE        &kp SPACE  &kp ENTER  &none
            >;
        };

        Fn {
            bindings = <
&none  &kp F1  &kp F2   &kp F3   &kp F4   &none        &none      &none           &none      &none     &none         &none
&none  &kp F5  &kp F6   &kp F7   &kp F8   &none        &none      &kp LEFT_SHIFT  &kp LCTRL  &kp LALT  &kp LEFT_GUI  &none
&none  &kp F9  &kp F10  &kp F11  &kp F12  &none        &none      &none           &none      &none     &none         &none
                        &none    &none    &kp SPACE    &kp SPACE  &none           &none
            >;
        };

        adj {
            bindings = <
&none  &none  &none  &none  &none  &none          &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none
&none  &none  &none  &none  &none  &none          &none         &none         &none         &none         &bt BT_CLR      &none
&none  &none  &none  &none  &none  &none          &none         &none         &none         &none         &studio_unlock  &none
                     &none  &none  &bootloader    &bootloader   &none         &out OUT_TOG
            >;
        };
    };
};
